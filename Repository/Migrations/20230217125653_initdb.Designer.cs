// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Entities;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(BookSellingContext))]
    [Migration("20230217125653_initdb")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("AccountId")
                        .HasName("PK__Accounts__46A222CD4BD1145A");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Accounts__AB6E61649EDB0C88")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Email = "admin@gmail.com",
                            Password = "$2a$11$Q/R1KNyKvoL0al40jLe8pu7HgpBoJW931wIvgRfAxz1g9fzfChS0C",
                            RoleId = 1
                        },
                        new
                        {
                            AccountId = 2,
                            Email = "khoabm@gmail.com",
                            Password = "$2a$11$z3ze8hRqM3.5MX4.tzEsMO/Ruy2pUDCYShBqo9p0fEfB9In2KwQbi",
                            RoleId = 2
                        },
                        new
                        {
                            AccountId = 3,
                            Email = "khaitq@gmail.com",
                            Password = "$2a$11$JQhrDkQaFD9MweWoG/l3g.0m9VnvWKK9CADryqwL57t/ojulOlxOe",
                            RoleId = 2
                        },
                        new
                        {
                            AccountId = 4,
                            Email = "mainh@gmail.com",
                            Password = "$2a$11$E631HzuRQsQRYNMvHszqBuJdefv.DvGHBtZJLb6UmzAGFU3fKnccG",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Repository.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(511)
                        .IsUnicode(false)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("image_link");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("publisher");

                    b.Property<int?>("QuantityLeft")
                        .HasColumnType("int")
                        .HasColumnName("quantity_left");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("BookId")
                        .HasName("books_pkey");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Barack Obama",
                            Description = "A riveting, deeply personal account of history in the making, from the president who inspired us to believe in the power of democracy.\nIn the stirring, highly anticipated first volume of his presidential memoirs, Barack Obama tells the story of his improbable odyssey from young man searching for his identity to leader of the free world, describing in strikingly personal detail both his political education and the landmark moments of the first term of his historic presidency—a time of dramatic transformation and turmoil.",
                            ImageLink = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1600357110l/55361205._SY475_.jpg",
                            Price = 35.649999999999999,
                            Publisher = "All IndieLit",
                            QuantityLeft = 79,
                            Status = (short)1,
                            Title = "A Promised Land"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Trevor Noah",
                            Description = "The memoir of one man’s coming-of-age, set during the twilight of apartheid and the tumultuous days of freedom that followed.\nTrevor Noah’s unlikely path from apartheid South Africa to the desk of The Daily Show began with a criminal act: his birth.Trevor was born to a white Swiss father and a black Xhosa mother at a time when such a union was punishable by five years in prison.Living proof of his parents’ indiscretion, Trevor was kept mostly indoors for the earliest years of his life, bound by the extreme and often absurd measures his mother took to hide him from a government that could, at any moment, steal him away.Finally liberated by the end of South Africa’s tyrannical white rule, Trevor and his mother set forth on a grand adventure, living openly and freely and embracing the opportunities won by a centuries - long struggle.\nBorn a Crime is the story of a mischievous young boy who grows into a restless young man as he struggles to find himself in a world where he was never supposed to exist.It is also the story of that young man’s relationship with his fearless, rebellious, and fervently religious mother—his teammate, a woman determined to save her son from the cycle of poverty, violence, and abuse that would ultimately threaten her own life. ",
                            ImageLink = "https://firebasestorage.googleapis.com/v0/b/spring-react-learning.appspot.com/o/images%2F29780253.jpeg061384cb-9a74-4571-ad91-fc2ad166e157?alt=media&token=021c0026-7bc6-4da9-8727-4967f15f3848",
                            Price = 15.65,
                            Publisher = "Spiegel & Grau",
                            QuantityLeft = 120,
                            Status = (short)1,
                            Title = "Born a Crime: Stories From a South African Childhood"
                        });
                });

            modelBuilder.Entity("Repository.Entities.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookGenreId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.HasKey("BookGenreId")
                        .HasName("PK__Book_gen__3AF2D0E0B7D53204");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("Book_genre", (string)null);

                    b.HasData(
                        new
                        {
                            BookGenreId = 1,
                            BookId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            BookGenreId = 2,
                            BookId = 2,
                            GenreId = 2
                        });
                });

            modelBuilder.Entity("Repository.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("CartId")
                        .HasName("PK__Carts__2EF52A27F5930AD2");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Repository.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("comment_date");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<double?>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__E795768797212946");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__CD65CB85534F5168");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Birthday = new DateTime(2000, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "M",
                            Name = "Admin",
                            Status = (short)1
                        },
                        new
                        {
                            CustomerId = 2,
                            Birthday = new DateTime(2000, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "M",
                            Name = "Bui Minh Khoa",
                            Status = (short)1
                        },
                        new
                        {
                            CustomerId = 3,
                            Birthday = new DateTime(2000, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "M",
                            Name = "Tran Quang Khai",
                            Status = (short)1
                        },
                        new
                        {
                            CustomerId = 4,
                            Birthday = new DateTime(2000, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "F",
                            Name = "Nguyen Hong Mai",
                            Status = (short)1
                        });
                });

            modelBuilder.Entity("Repository.Entities.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.HasKey("FavoriteId")
                        .HasName("PK__Favorite__46ACF4CB0936277D");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Repository.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)")
                        .HasColumnName("genre_name");

                    b.HasKey("GenreId")
                        .HasName("PK__Genres__18428D42264014B7");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Fiction"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Non-fiction"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Thriller"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreId = 5,
                            GenreName = "Art"
                        },
                        new
                        {
                            GenreId = 6,
                            GenreName = "Sci-fi"
                        },
                        new
                        {
                            GenreId = 7,
                            GenreName = "History"
                        },
                        new
                        {
                            GenreId = 8,
                            GenreName = "Horror"
                        },
                        new
                        {
                            GenreId = 9,
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreId = 10,
                            GenreName = "Folktale"
                        });
                });

            modelBuilder.Entity("Repository.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("PlaceDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("place_date");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__465962298E70F8CB");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Repository.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_details_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailsId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderDetailsId")
                        .HasName("PK__OrderDet__F6FB5AE46DDE9327");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Repository.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__760965CCF7B86864");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Repository.Entities.Account", b =>
                {
                    b.HasOne("Repository.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Accounts__role_i__276EDEB3");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Entities.BookGenre", b =>
                {
                    b.HasOne("Repository.Entities.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Book_genr__book___31EC6D26");

                    b.HasOne("Repository.Entities.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__Book_genr__genre__32E0915F");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Repository.Entities.Cart", b =>
                {
                    b.HasOne("Repository.Entities.Book", "Book")
                        .WithMany("Carts")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Carts__book_id__3D5E1FD2");

                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Carts__customer___3E52440B");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repository.Entities.Comment", b =>
                {
                    b.HasOne("Repository.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__book_i__398D8EEE");

                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__custom__3A81B327");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.HasOne("Repository.Entities.Account", "CustomerNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("Repository.Entities.Customer", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Customers__custo__2A4B4B5E");

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("Repository.Entities.Favorite", b =>
                {
                    b.HasOne("Repository.Entities.Book", "Book")
                        .WithMany("Favorites")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__book___35BCFE0A");

                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__custo__36B12243");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repository.Entities.Order", b =>
                {
                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__customer__412EB0B6");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repository.Entities.OrderDetail", b =>
                {
                    b.HasOne("Repository.Entities.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__book___440B1D61");

                    b.HasOne("Repository.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__order__44FF419A");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Entities.Account", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repository.Entities.Book", b =>
                {
                    b.Navigation("BookGenres");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Repository.Entities.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
